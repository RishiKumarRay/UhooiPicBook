///
/// @Generated by Mockolo
///



import CoreGraphics
import CoreSpotlight
import FirebaseFirestore
import FirebaseMessaging
import Foundation
import ImageCache
import Logger
import MonstersFirebaseClient
import UIKit
import os
@testable import AppModule


final class MonsterDetailInteractorInputMock: MonsterDetailInteractorInput {
    init() { }


}

final class MonstersTempRepositoryMock: MonstersTempRepository {
    init() { }


    private(set) var loadMonsterCallCount = 0
    var loadMonsterHandler: ((String) -> (MonsterEntity?))?
    func loadMonster(key: String) -> MonsterEntity? {
        loadMonsterCallCount += 1
        if let loadMonsterHandler = loadMonsterHandler {
            return loadMonsterHandler(key)
        }
        return nil
    }

    private(set) var saveMonsterCallCount = 0
    var saveMonsterHandler: ((MonsterEntity, String) -> ())?
    func saveMonster(_ monster: MonsterEntity, forKey key: String)  {
        saveMonsterCallCount += 1
        if let saveMonsterHandler = saveMonsterHandler {
            saveMonsterHandler(monster, key)
        }
        
    }
}

public final class ImageCacheManagerProtocolMock: ImageCacheManagerProtocol {
    public init() { }


    public private(set) var cacheImageCallCount = 0
    public var cacheImageHandler: ((URL) throws -> (UIImage))?
    public func cacheImage(imageUrl: URL) throws -> UIImage {
        cacheImageCallCount += 1
        if let cacheImageHandler = cacheImageHandler {
            return try cacheImageHandler(imageUrl)
        }
        return UIImage()
    }

    public private(set) var cacheGIFImageCallCount = 0
    public var cacheGIFImageHandler: ((URL) -> (UIImage?))?
    public func cacheGIFImage(imageUrl: URL) -> UIImage? {
        cacheGIFImageCallCount += 1
        if let cacheGIFImageHandler = cacheGIFImageHandler {
            return cacheGIFImageHandler(imageUrl)
        }
        return nil
    }
}

public final class MonstersRepositoryMock: MonstersRepository {
    public init() { }


    public private(set) var loadMonstersCallCount = 0
    public var loadMonstersHandler: (() throws -> ([MonsterDTO]))?
    public func loadMonsters() throws -> [MonsterDTO] {
        loadMonstersCallCount += 1
        if let loadMonstersHandler = loadMonstersHandler {
            return try loadMonstersHandler()
        }
        return [MonsterDTO]()
    }
}

public final class LoggerProtocolMock: LoggerProtocol {
    public init() { }


    public private(set) var debugCallCount = 0
    public var debugHandler: ((String, String, String, Int, Int) -> ())?
    public func debug(_ message: String, file: String, function: String, line: Int, column: Int)  {
        debugCallCount += 1
        if let debugHandler = debugHandler {
            debugHandler(message, file, function, line, column)
        }
        
    }

    public private(set) var infoCallCount = 0
    public var infoHandler: ((String, String, String, Int, Int) -> ())?
    public func info(_ message: String, file: String, function: String, line: Int, column: Int)  {
        infoCallCount += 1
        if let infoHandler = infoHandler {
            infoHandler(message, file, function, line, column)
        }
        
    }

    public private(set) var noticeCallCount = 0
    public var noticeHandler: ((String, String, String, Int, Int) -> ())?
    public func notice(_ message: String, file: String, function: String, line: Int, column: Int)  {
        noticeCallCount += 1
        if let noticeHandler = noticeHandler {
            noticeHandler(message, file, function, line, column)
        }
        
    }

    public private(set) var errorCallCount = 0
    public var errorHandler: ((String, String, String, Int, Int) -> ())?
    public func error(_ message: String, file: String, function: String, line: Int, column: Int)  {
        errorCallCount += 1
        if let errorHandler = errorHandler {
            errorHandler(message, file, function, line, column)
        }
        
    }

    public private(set) var faultCallCount = 0
    public var faultHandler: ((String, String, String, Int, Int) -> ())?
    public func fault(_ message: String, file: String, function: String, line: Int, column: Int)  {
        faultCallCount += 1
        if let faultHandler = faultHandler {
            faultHandler(message, file, function, line, column)
        }
        
    }

    public private(set) var exceptionCallCount = 0
    public var exceptionHandler: ((Error, String, String, Int, Int) -> ())?
    public func exception(_ error: Error, file: String, function: String, line: Int, column: Int)  {
        exceptionCallCount += 1
        if let exceptionHandler = exceptionHandler {
            exceptionHandler(error, file, function, line, column)
        }
        
    }
}

final class MonsterListRouterInputMock: MonsterListRouterInput {
    init() { }


    private(set) var showMonsterDetailCallCount = 0
    var showMonsterDetailHandler: ((MonsterEntity) -> ())?
    func showMonsterDetail(monster: MonsterEntity)  {
        showMonsterDetailCallCount += 1
        if let showMonsterDetailHandler = showMonsterDetailHandler {
            showMonsterDetailHandler(monster)
        }
        
    }

    private(set) var showContactUsCallCount = 0
    var showContactUsHandler: (() -> ())?
    func showContactUs()  {
        showContactUsCallCount += 1
        if let showContactUsHandler = showContactUsHandler {
            showContactUsHandler()
        }
        
    }

    private(set) var showPrivacyPolicyCallCount = 0
    var showPrivacyPolicyHandler: (() -> ())?
    func showPrivacyPolicy()  {
        showPrivacyPolicyCallCount += 1
        if let showPrivacyPolicyHandler = showPrivacyPolicyHandler {
            showPrivacyPolicyHandler()
        }
        
    }

    private(set) var showSettingsCallCount = 0
    var showSettingsHandler: (() -> ())?
    func showSettings()  {
        showSettingsCallCount += 1
        if let showSettingsHandler = showSettingsHandler {
            showSettingsHandler()
        }
        
    }

    private(set) var showAboutThisAppCallCount = 0
    var showAboutThisAppHandler: (() -> ())?
    func showAboutThisApp()  {
        showAboutThisAppCallCount += 1
        if let showAboutThisAppHandler = showAboutThisAppHandler {
            showAboutThisAppHandler()
        }
        
    }
}

final class MonsterDetailRouterInputMock: MonsterDetailRouterInput {
    init() { }


    private(set) var popupDancingImageCallCount = 0
    var popupDancingImageHandler: ((UIImage) -> ())?
    func popupDancingImage(_ dancingImage: UIImage)  {
        popupDancingImageCallCount += 1
        if let popupDancingImageHandler = popupDancingImageHandler {
            popupDancingImageHandler(dancingImage)
        }
        
    }

    private(set) var showActivityCallCount = 0
    var showActivityHandler: ((UIView, String, UIImage) -> ())?
    func showActivity(_ senderView: UIView, text: String, icon: UIImage)  {
        showActivityCallCount += 1
        if let showActivityHandler = showActivityHandler {
            showActivityHandler(senderView, text, icon)
        }
        
    }
}

final class MonsterListInteractorInputMock: MonsterListInteractorInput {
    init() { }


    private(set) var fetchMonstersCallCount = 0
    var fetchMonstersHandler: (() throws -> ([MonsterDTO]))?
    func fetchMonsters() throws -> [MonsterDTO] {
        fetchMonstersCallCount += 1
        if let fetchMonstersHandler = fetchMonstersHandler {
            return try fetchMonstersHandler()
        }
        return [MonsterDTO]()
    }

    private(set) var saveForSpotlightCallCount = 0
    var saveForSpotlightHandler: ((MonsterEntity) -> ())?
    func saveForSpotlight(_ monster: MonsterEntity)  {
        saveForSpotlightCallCount += 1
        if let saveForSpotlightHandler = saveForSpotlightHandler {
            saveForSpotlightHandler(monster)
        }
        
    }
}

final class SpotlightRepositoryMock: SpotlightRepository {
    init() { }


    private(set) var saveMonsterCallCount = 0
    var saveMonsterHandler: ((MonsterEntity, String) -> ())?
    func saveMonster(_ monster: MonsterEntity, forKey key: String)  {
        saveMonsterCallCount += 1
        if let saveMonsterHandler = saveMonsterHandler {
            saveMonsterHandler(monster, key)
        }
        
    }
}

final class MonsterListUserInterfaceMock: MonsterListUserInterface {
    init() { }


    private(set) var showMonstersCallCount = 0
    var showMonstersHandler: (([MonsterEntity]) -> ())?
    func showMonsters(_ monsters: [MonsterEntity])  {
        showMonstersCallCount += 1
        if let showMonstersHandler = showMonstersHandler {
            showMonstersHandler(monsters)
        }
        
    }

    private(set) var startIndicatorCallCount = 0
    var startIndicatorHandler: (() -> ())?
    func startIndicator()  {
        startIndicatorCallCount += 1
        if let startIndicatorHandler = startIndicatorHandler {
            startIndicatorHandler()
        }
        
    }

    private(set) var stopIndicatorCallCount = 0
    var stopIndicatorHandler: (() -> ())?
    func stopIndicator()  {
        stopIndicatorCallCount += 1
        if let stopIndicatorHandler = stopIndicatorHandler {
            stopIndicatorHandler()
        }
        
    }
}

final class MonsterDetailUserInterfaceMock: MonsterDetailUserInterface {
    init() { }


}

final class MonsterDetailInteractorOutputMock: MonsterDetailInteractorOutput {
    init() { }


}

final class MonsterListInteractorOutputMock: MonsterListInteractorOutput {
    init() { }


}

